var documenterSearchIndex = {"docs":
[{"location":"api/#Parser","page":"API","title":"Parser","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"TotalViewITCH.Parser","category":"page"},{"location":"api/#TotalViewITCH.Parser","page":"API","title":"TotalViewITCH.Parser","text":"Parser\n\nA struct used to parse TotalViewITCH files and their contents to disk.\n\nDetails\n\nParsers are responsible for deserializing order book messages stored in raw (binary) TotalViewITCH files and generating order book snapshots.  Parsers wrap Backend objects that write messages and order book snapshots to disk. By default, parsers maintain the first five levels of each order book the user requests to track and writes out data after every buffer_size messages read for each ticker (separately).\n\nExamples\n\nparser = Parser{FileSystem}(\"./data/test\")\nparser(\"./data/bin/S031413-v41.txt\", Date(\"2013-03-14\"), [\"A\"], 4.1)\n\nparser = Parser{MongoDB}(\"mongodb://localhost:27017\")\nparser(\"data/bin/S022717-v50.txt\", Date(\"2017-02-27\"), [\"A\"], 5.0)\n\n\n\n\n\n","category":"type"},{"location":"api/#Backends","page":"API","title":"Backends","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"TotalViewITCH.FileSystem","category":"page"},{"location":"api/#TotalViewITCH.FileSystem","page":"API","title":"TotalViewITCH.FileSystem","text":"FileSystem <: Backend\n\nA backend for storing data to the local file system in CSV format.\n\nData is stored with the following directory structure:\n\nroot\n|- collection\n   |- ticker\n      |- date\n         |- partition.csv\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"TotalViewITCH.MongoDB","category":"page"},{"location":"api/#TotalViewITCH.MongoDB","page":"API","title":"TotalViewITCH.MongoDB","text":"MongoDB <: Backend\n\nA backend for storing data to MongoDB.\n\nThe default database name is \"totalview-itch\", which contains the following  collections:\n\nmessages\norderbooks\nnoii\ntrades\n\nAll collections are indexed by ticker and date fields.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"TotalViewITCH.ping\nTotalViewITCH.build\nTotalViewITCH.clean\nTotalViewITCH.teardown\nTotalViewITCH.find","category":"page"},{"location":"api/#TotalViewITCH.ping","page":"API","title":"TotalViewITCH.ping","text":"ping(b::Backend)\n\nCheck if the backend can connect to the database.\n\n\n\n\n\n","category":"function"},{"location":"api/#TotalViewITCH.build","page":"API","title":"TotalViewITCH.build","text":"build(b::Backend; kwargs)\n\nScaffold a database. By default, the program prompts the user to overwrite existing files. Set force=true to overwrite existing files without prompting.\n\n\n\n\n\n","category":"function"},{"location":"api/#TotalViewITCH.clean","page":"API","title":"TotalViewITCH.clean","text":"clean(date::Date, ticker::String, b::Backend)\n\nRemove all data found for the specified date and ticker.\n\n\n\n\n\nclean(date::Date, b::Backend)\n\nRemove all data found for the specified date.\n\n\n\n\n\nclean(ticker::String, b::Backend)\n\nRemove all data found for the specified ticker.\n\n\n\n\n\n","category":"function"},{"location":"api/#TotalViewITCH.teardown","page":"API","title":"TotalViewITCH.teardown","text":"teardown(b::Backend)\n\nRemove all database files. Set force=true to skip the default confirmation prompt.\n\n\n\n\n\n","category":"function"},{"location":"api/#TotalViewITCH.find","page":"API","title":"TotalViewITCH.find","text":"find(b::Backend, collection, ticker, date)\n\nLoad processed data for the specified collection, ticker and date, if available.\n\n\n\n\n\n","category":"function"},{"location":"api/#Messages","page":"API","title":"Messages","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"TotalViewITCH.OrderMessage\nTotalViewITCH.SystemMessage\nTotalViewITCH.NOIIMessage\nTotalViewITCH.TradeMessage","category":"page"},{"location":"api/#TotalViewITCH.OrderMessage","page":"API","title":"TotalViewITCH.OrderMessage","text":"OrderMessage\n\nA simple data type representing order book updates.\n\nOrder book updates communicate changes to the order book in response to trader actions, e.g., add, execute, delete, etc.\n\n\n\n\n\n","category":"type"},{"location":"api/#TotalViewITCH.SystemMessage","page":"API","title":"TotalViewITCH.SystemMessage","text":"SystemMessage\n\nA simple data type representing system updates.\n\nSystem updates comunicate changes that apply to the entire exchange, such as the beginning and ending of trading hours.\n\n\n\n\n\n","category":"type"},{"location":"api/#TotalViewITCH.NOIIMessage","page":"API","title":"TotalViewITCH.NOIIMessage","text":"NOIIMessage\n\nA simple data type representing net order imbalance indicator messages and cross trade messages.\n\n\n\n\n\n","category":"type"},{"location":"api/#TotalViewITCH.TradeMessage","page":"API","title":"TotalViewITCH.TradeMessage","text":"TradeMessage\n\nA simple data type representing trade messages.\n\n\n\n\n\n","category":"type"},{"location":"api/#Order-Books","page":"API","title":"Order Books","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"TotalViewITCH.Order\nTotalViewITCH.Book","category":"page"},{"location":"api/#TotalViewITCH.Order","page":"API","title":"TotalViewITCH.Order","text":"Order\n\nA limit order.\n\n\n\n\n\n","category":"type"},{"location":"api/#TotalViewITCH.Book","page":"API","title":"TotalViewITCH.Book","text":"Book\n\nA limit order book.\n\nArguments\n\nticker::String: the associated security ticker.\nnlevels::Int: the number of levels reported in tabular format.\n\n\n\n\n\n","category":"type"},{"location":"#TotalViewITCH.jl","page":"Home","title":"TotalViewITCH.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A toolkit to process NASDAQ TotalView-ITCH data for academic research.","category":"page"},{"location":"#Description","page":"Home","title":"Description","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Nasdaq TotalView-ITCH (“TotalView”) is a data feed used by professional traders to maintain a real-time view of market conditions. TotalView disseminates all quote and order activity for securities traded on the Nasdaq exchange—several billion messages per day—allowing users to reconstruct the limit order book for any security up to arbitrary depth with nanosecond precision. It is a unique data source for financial economists and engineers examining topics such as information flows through lit exchanges, optimal trading strategies, and the development of macro-level indicators from micro-level signals (e.g., a market turbulence warning).","category":"page"},{"location":"","page":"Home","title":"Home","text":"While TotalView data is provided at no charge to academic researchers via the Historical TotalView-ITCH offering, the historical data offering uses a binary file specification that poses challenges for researchers. TotalViewITCH.jl is a pure Julia package developed to efficiently process historical data files for academic research purposes. The package consists of: (1) a core module to parse Historical TotalView binary file format messages (i.e., deserialization), (2) a module to reconstruct limit order books from parsed messages, and (3) a module to store processed data into a research-friendly format.","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package is not yet part of the general registry. You can install it from GitHub instead:","category":"page"},{"location":"","page":"Home","title":"Home","text":"add https://github.com/cswaney/TotalViewITCH.jl.git","category":"page"},{"location":"#Basic-Usage","page":"Home","title":"Basic Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Usage is straightforward:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TotalViewITCH: Parser, FileSystem, find\nusing Dates\n\nparser = Parser{FileSystem}(\"./data/test\")\nparser(\"./data/bin/S031413-v41.txt\", Date(\"2013-03-14\"), [\"A\"], 4.1)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This example parses a raw ITCH file, S031213-v41.txt, which happens to have v4.1 formatting, and stores the extracted data (message, orderbooks, etc.) to CSV files in ./data/test. To process multiple tickers, simply add additional tickers to the list:","category":"page"},{"location":"","page":"Home","title":"Home","text":"parser(\"./data/bin/S031413-v41.txt\", Date(\"2013-03-14\"), [\"A\", \"APPL\"], 4.1)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Processing of multiple files (i.e., dates) should be performed with multiple processes or, better yet, using multiple jobs on a high-performance computing cluster.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The processed data can be loaded using your favorite data processing tools (e.g., DataFrames.jl). For convenience, TotalViewITCHh provices a find method to pull all data associated with a ticker-date pair:","category":"page"},{"location":"","page":"Home","title":"Home","text":"df = find(parser.backend, \"messages\", \"A\", Date(\"2013-03-14\"))","category":"page"},{"location":"","page":"Home","title":"Home","text":"This method isn't recommended for large-scale analysis, but works fine for exploring single ticker-dates.","category":"page"},{"location":"","page":"Home","title":"Home","text":"tip: Tip\nFor large-scale analyses, its recommended to convert the processed data to the Apache Parquet format and use tools such as Apache Spark.","category":"page"},{"location":"#Backends","page":"Home","title":"Backends","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TotalViewITCH.jl aims to support a variety data storage options via Backends. A backend is a struct that knows how to read and write ITCH data stored in a particular format. The currently supported backends are FileSystem and MongoDB.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is usually unnecessary to directly construct a backend because constructing a Parser automatically creates a backend for you:","category":"page"},{"location":"","page":"Home","title":"Home","text":"parser = Parser{FileSystem}(\"./data/test\", nlevels=5)","category":"page"},{"location":"","page":"Home","title":"Home","text":"However, you can directly construct a backend if you need to set additional options:","category":"page"},{"location":"","page":"Home","title":"Home","text":"backend = MongoDB(\"mongodb://localhost:27017\", \"awesome-itch\", 3)\nparser = Parser(backend, 3)","category":"page"},{"location":"#FileSystem","page":"Home","title":"FileSystem","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The FileSystem backend stores data in CSV format. Output has the following directory structure:","category":"page"},{"location":"","page":"Home","title":"Home","text":"test\n|- messages\n   |- ticker=A\n      |- date=2013-03-14\n         |- partition.csv\n|- orderbooks\n|- noii\n|- trades","category":"page"},{"location":"","page":"Home","title":"Home","text":"This structure is convenient for parallelizing analyses performed at the ticker-date level. ","category":"page"},{"location":"#MongoDB","page":"Home","title":"MongoDB","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For small to medium sized databases, TotalViewITCH also provides a MongoDB backend. To set up a MongoDB database with Docker, run the following command in a terminal:","category":"page"},{"location":"","page":"Home","title":"Home","text":"docker run -p 27017:27017 --volume path/to/data/db:/data/db mongo:latest","category":"page"},{"location":"","page":"Home","title":"Home","text":"This command exposes the database to your local machine on port 27017. Now you can populate the database in Julia:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TotalViewITCH: Parser, MongoDB\nbackend = MongoDB(\"mongodb://localhost:27017\", \"test\")\nparser = Parser{MongoDB}(backend)\nparser(\"./data/bin/S031413-v41.txt\", Date(\"2013-03-14\"), [\"A\"], 4.1)","category":"page"},{"location":"#Postgres","page":"Home","title":"Postgres","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Coming soon 🦺 🚧 🔨","category":"page"},{"location":"#Parquet","page":"Home","title":"Parquet","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Coming soon 🦺 🚧 🔨","category":"page"},{"location":"#Data","page":"Home","title":"Data","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The default parsing method creates four tables/collections:","category":"page"},{"location":"","page":"Home","title":"Home","text":"messages: messages that reflect order book updates,\norderbooks: order book snapshots following each message, \nnoii: net order imbalance indicator messages, \ntrades: messages that indicate trades involving non-displayed orders, ","category":"page"},{"location":"","page":"Home","title":"Home","text":"All records are stored in ascending temporal order, and all data is stored without modification, i.e., all fields adhere to the format described in the relevant TotalView specification.","category":"page"},{"location":"#messages","page":"Home","title":"messages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Each row of the messages table indicates an update to the order book. The types of updates are:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Add (A or F)\nCancel (X)\nDelete (D)\nReplace (U)\nExecute (E or C)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that replace orders are not split into their constituent add and delete orders in the database.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Field Type Description Required? Default\ndate Date The file date (YYYY-MM-DD). ✓ \nsec Int The number of seconds since midnight. ✓ \nnano Int The number of nanoseconds since the most recent second. ✓ \ntype Char The message type symbol as defined in TotalView specification. ✓ \nticker String The stock ticker associated with the message. ✓ \nside Char The side of the order book affected by the message (B or S). ✓ \nprice Int The price associated with an order update. ✓ \nrefno Int A day-unique reference number associated with an original limit order. ✓ \nnewrefno Int A day-unique reference number associated with a new limit order.  Missing\nmpid String An optional market participant identifier.  Missing","category":"page"},{"location":"#orderbooks","page":"Home","title":"orderbooks","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Each row the orderbooks table represents a snapshot of the order book associated with an order book update. That is, the n-th row of the orderbooks table represents the state of the order book immediately following the update indicated by the n-th row of the messages table. The exact fields available depend on the number of levels of levels tracked during parsing, N. For a given N, prices and shares are recorded in order from best to worst offer for bids and asks, respectively.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Field Type Description Required? Default\ndate Date The file date (YYYY-MM-DD). ✓ \nsec Int The number of seconds since midnight. ✓ \nnano Int The number of nanoseconds since the most recent second. ✓ Missing\nbidpricen Int The offer price of the n-th best bid (N=1,..., N). ✓ Missing\naskpricen Int The offer price of the n-th best ask (N=1,..., N). ✓ Missing\nbidsharesn Int The offer volume at the n-th best bid (N=1,..., N). ✓ Missing\nasksharesn Int The offer volume at the n-th best ask (N=1,..., N). ✓ Missing","category":"page"},{"location":"#noii","page":"Home","title":"noii","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Net Order Imbalance Indicator (NOII) messages are disseminated prior to market open and close as well as during quote only periods. The noii collection stores these messages for all tickers in a single file for each date.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Field Type Description Required? Default\ndate Date The file date (YYYY-MM-DD). ✓ \nsec Int The number of seconds since midnight. ✓ \nnano Int The number of nanoseconds since the most recent second. ✓ \ntype Char The cross type: opening (O), close (C) or halted (H). ✓ \nticker String The stock ticker associated with the message. ✓ \npaired Int The number of shares matched at the current reference price. ✓ \nimbalance Int The number of shares not paired at the current reference price. ✓ \ndirection Char The side of the imbalance (B, S, N or O). ✓ \nfar Int A hypothetical clearing price for cross orders only. ✓ \nnear Int A hypothetical clearing price for cross and continuous orders. ✓ \ncurrent Int The price at which the imbalance is calculated. ✓ ","category":"page"},{"location":"#trades","page":"Home","title":"trades","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Rows of the trades collection reflect two types of trades that are not captured in the order book update: cross and non-cross trades. Non-cross trade messages \"provide details for normal match events involving non-displayable order type\"—i.e., hidden orders. Cross trade message (type=='Q') \"indicate that Nasdaq has completed its cross process for a specific security\". Neither trade type affects the state of the (visible) order book, but both should be included in volume calculations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Field Type Description Required? Default\ndate Date The file date (YYYY-MM-DD). ✓ \nsec Int The number of seconds since midnight. ✓ \nnano Int The number of nanoseconds since the most recent second. ✓ \ntype Char The type of trade: hidden (P) or cross (Q). ✓ \nticker String The stock ticker associated with the trade. ✓ \nrefno Int A day-unique reference number associated with an original limit order. Hidden trades only. Missing\nmatchno Int A day-unique reference number associated with the trade or cross. ✓ \nside Char The type of non-display order matched (B of S). Hidden trades only. Missing\nprice Int The price of the cross. Cross trades only. Missing\nshares Int The number of shares traded. ✓ \ncross Int The cross type: opening (O), close (C), halted (H) or intrday (I). ✓ ","category":"page"},{"location":"#Data-Version-Support","page":"Home","title":"Data Version Support","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TotalViewITCH.jl supports versions 4.1 and 5.0 of the TotalView-ITCH file specificiation. The parser processes all message types required to reconstruct limit order books as well as several types that do not impact the order book.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Message Type Symbol Supported? Notes\nTimestamp T 4.1 Message type only exists for v4.1.\nSystem S ✓ \nMarket Participant L  \nTrade Action H ✓ \nReg SHO Y  \nStock Directory R  \nAdd A ✓ \nAdd w/ MPID F ✓ \nExecute E ✓ \nExecute w/ Price C ✓ \nCancel X ✓ \nDelete D ✓ \nReplace U ✓ \nCross Trade Q ✓ Ignored by order book updates.\nTrade P ✓ Ignored by order book updates.\nBroken Trade B  Ignored by order book updates.\nNOII I ✓ \nRPII N  ","category":"page"},{"location":"#Planned-Work","page":"Home","title":"Planned Work","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We plan to process and record the following additional message types:","category":"page"},{"location":"","page":"Home","title":"Home","text":"stock related messages (e.g., financial status and market category),\nstock trading action codes (e.g., trading halts for individual stocks),\nReg SHO codes,\nmarket participant position codes,\nexecution codes","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nNote that the format of the database is not stable and will likely change in the near future.","category":"page"},{"location":"#Not-Planned","page":"Home","title":"Not Planned","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are no plans to support the following message categories:","category":"page"},{"location":"","page":"Home","title":"Home","text":"broken trade messages (4.6.3)\nretail price improvement indicator (RPII) messages (4.8),\nmarket-wide circuit breaker messages (4.2.5)\nIPO quoting period updates (4.2.6),\nLimit up/down (LULD) aution collar messages (4.2.7),\nOperational halt messages (4.2.8),","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is intended to be a community resource for researchers working with TotalViewITCH. If you find a bug, have a suggestion or otherwise wish to contribute to the package, please feel free to create an issue.","category":"page"}]
}
